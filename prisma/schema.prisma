generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) // Primary key (UUID)
  userId       String        @unique     // Clerk user ID (e.g., user_2abc123)
  name         String
  age          Int
  gender       String
  imageUrl     String?      @default("https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg")
  phoneNumber  String
  email        String        @unique
  location     String
  appointments Appointment[] @relation("UserAppointments")
  chats        SymptomChat[] @relation("UserSymptomChats")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  ambulanceBookings AmbulanceBooking[]
}

model Doctor {
  id             String              @id @default(uuid()) // Primary key (UUID)
  userId         String              @unique     // Clerk user ID (e.g., user_2xyz456)
  name           String
  specialization String
  experience     Int
  location       String
  phoneNumber    String
  email          String              @unique
  imageUrl       String?              @default("https://c8.alamy.com/comp/2FJRFJP/flat-male-doctor-avatar-in-medical-coat-and-with-stethoscope-healthcare-vector-illustration-people-cartoon-avatar-profile-character-icon-2FJRFJP.jpg")
  appointments   Appointment[]       @relation("DoctorAppointments")
  availabilities DoctorAvailability[] @relation("DoctorAvailability")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Appointment {
  id              String             @id @default(uuid())
  date            DateTime
  reason          String
  status          AppointmentStatus  @default(PENDING)
  userId          String
  doctorId        String
  availabilityId  String?
  meetingId      String? // For video call
  user            User               @relation("UserAppointments", fields: [userId], references: [userId]) // References User.userId (Clerk ID)
  doctor          Doctor             @relation("DoctorAppointments", fields: [doctorId], references: [userId]) // References Doctor.userId (Clerk ID)
  availability    DoctorAvailability? @relation(fields: [availabilityId], references: [id])
  createdAt       DateTime           @default(now())
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model DoctorAvailability {
  id           String        @id @default(uuid())
  doctorId     String
  doctor       Doctor        @relation("DoctorAvailability", fields: [doctorId], references: [userId]) // References Doctor.userId (Clerk ID)
  startTime    DateTime      // Example: "2025-04-26T09:00:00Z"
  endTime      DateTime      // Example: "2025-04-26T17:00:00Z"
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  @@unique([doctorId, startTime, endTime])
}

model Symptom {
  id          String        @id @default(uuid())
  description String
  symptomChats SymptomChatSymptom[]
}

model SymptomChat {
  id                 String              @id @default(uuid())
  userId             String
  user               User                @relation("UserSymptomChats", fields: [userId], references: [userId]) // References User.userId (Clerk ID)
  userInput          String              // The symptoms described by the user
  aiResponse         String              // The response from AI
  confidence         Float               // Confidence score from AI
  possibleCondition  String              // Condition predicted by AI
  symptoms           SymptomChatSymptom[] // Related symptoms
  recommendations    String?             // AI recommendations
  createdAt          DateTime            @default(now())
}

model SymptomChatSymptom {
  symptomId      String
  symptomChatId  String
  symptom        Symptom      @relation(fields: [symptomId], references: [id])
  symptomChat    SymptomChat  @relation(fields: [symptomChatId], references: [id])
  @@id([symptomId, symptomChatId])
}

model Ambulance {
  id              String            @id @default(uuid())
  vehicleNumber   String            @unique
  hospitalName    String
  location        String
  estimatedTime   Int               // Estimated time in minutes
  driverName      String?
  driverContact   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  bookings        AmbulanceBooking[]
}

model AmbulanceBooking {
  id              String        @id @default(uuid())
  userId          String
  ambulanceId     String
  user            User          @relation(fields: [userId], references: [userId]) 
  ambulance       Ambulance     @relation(fields: [ambulanceId], references: [id])
  status          BookingStatus @default(FREE)
  bookingTime     DateTime      @default(now())
  expiresAt       DateTime      // Will be set to bookingTime + 5 minutes
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


enum BookingStatus {
  BOOKED
  FREE
  EXPIRED
}